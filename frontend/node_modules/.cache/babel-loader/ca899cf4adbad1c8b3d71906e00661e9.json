{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { SIGNUP_SUCCESS, SIGNUP_FAIL, LOGIN_SUCCESS, LOGIN_FAIL, AUTHENTICATED_SUCCESS, AUTHENTICATED_FAIL, REFRECH_SUCCESS, REFRESH_FAIL, SET_AUTH_LOADING, REMOVE_AUTH_LOADING, ACTIVATION_SUCCESS, ACTIVATION_FAIL, USER_LOADED_SUCCESS, USER_LOADED_FAIL } from './types';\nexport const signup = (first_name, last_name, email, password, re_password) => async dispatch => {\n  dispatch({\n    type: SET_AUTH_LOADING\n  });\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    first_name,\n    last_name,\n    email,\n    password,\n    re_password\n  });\n\n  try {\n    const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/`, body, config);\n\n    if (res.data.email) {\n      dispatch({\n        type: SIGNUP_SUCCESS,\n        payload: res.data\n      });\n      dispatch(setAlert('We sent you an email, please activate your account', 'success'));\n    } else {\n      dispatch({\n        type: SIGNUP_FAIL\n      });\n      dispatch(setAlert('Error creating account', 'danger'));\n    }\n\n    dispatch({\n      type: REMOVE_AUTH_LOADING\n    });\n  } catch (err) {\n    dispatch({\n      type: SIGNUP_FAIL\n    });\n    dispatch({\n      type: REMOVE_AUTH_LOADING\n    });\n    dispatch(setAlert('Error creating account', 'danger'));\n  }\n};\nexport const load_user = () => async dispatch => {\n  if (localStorage.getItem('access')) {\n    const config = {\n      headers: {\n        'Authorization': `JWT ${localStorage.getItem('access')}`,\n        'Accept': 'application/json'\n      }\n    };\n\n    try {\n      const res = await axios.get(`${process.env.REACT_APP_API_URL}/auth/users/me`, config);\n\n      if (res.data.email) {\n        dispatch({\n          type: USER_LOADED_SUCCESS,\n          payload: res.data\n        });\n      } else {\n        dispatch({\n          type: USER_LOADED_FAIL\n        });\n      }\n    } catch (err) {\n      dispatch({\n        type: USER_LOADED_FAIL\n      });\n    }\n  }\n};\nexport const login = (email, password) => async dispatch => {\n  dispatch({\n    type: SET_AUTH_LOADING\n  });\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/create/`, body, config);\n\n    if (res.data.access) {\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data\n      });\n      dispatch(load_user());\n      dispatch({\n        type: REMOVE_AUTH_LOADING\n      });\n      dispatch(setAlert('Logged in successfully', 'success'));\n    } else {\n      dispatch({\n        type: LOGIN_FAIL\n      });\n      dispatch({\n        type: REMOVE_AUTH_LOADING\n      });\n      dispatch(setAlert('Error authenticating', 'danger'));\n    }\n  } catch (err) {\n    dispatch({\n      type: LOGIN_FAIL\n    });\n    dispatch({\n      type: REMOVE_AUTH_LOADING\n    });\n    dispatch(setAlert('Error authenticating', 'danger'));\n  }\n};\nexport const activate = (uid, token) => async dispatch => {\n  dispatch({\n    type: SET_AUTH_LOADING\n  });\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    uid,\n    token\n  });\n\n  try {\n    const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/activation/`, body, config);\n\n    if (res.data.uid || res.data.token) {\n      dispatch({\n        type: ACTIVATION_FAIL\n      });\n      dispatch(setAlert('Error activating account', 'danger'));\n    } else {\n      dispatch({\n        type: ACTIVATION_SUCCESS\n      });\n      dispatch(setAlert('Successfully activated your account', 'success'));\n    }\n\n    dispatch({\n      type: REMOVE_AUTH_LOADING\n    });\n  } catch (err) {\n    dispatch({\n      type: ACTIVATION_FAIL\n    });\n    dispatch({\n      type: REMOVE_AUTH_LOADING\n    });\n    dispatch(setAlert('Error creating account', 'danger'));\n  }\n};","map":{"version":3,"sources":["C:/Users/sale1/Desktop/SHOPTIME/frontend/src/actions/auth.js"],"names":["axios","setAlert","SIGNUP_SUCCESS","SIGNUP_FAIL","LOGIN_SUCCESS","LOGIN_FAIL","AUTHENTICATED_SUCCESS","AUTHENTICATED_FAIL","REFRECH_SUCCESS","REFRESH_FAIL","SET_AUTH_LOADING","REMOVE_AUTH_LOADING","ACTIVATION_SUCCESS","ACTIVATION_FAIL","USER_LOADED_SUCCESS","USER_LOADED_FAIL","signup","first_name","last_name","email","password","re_password","dispatch","type","config","headers","body","JSON","stringify","res","post","process","env","REACT_APP_API_URL","data","payload","err","load_user","localStorage","getItem","get","login","access","activate","uid","token"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { setAlert } from './alert';\r\nimport {\r\n    SIGNUP_SUCCESS,\r\n    SIGNUP_FAIL,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    AUTHENTICATED_SUCCESS,\r\n    AUTHENTICATED_FAIL,\r\n    REFRECH_SUCCESS,\r\n    REFRESH_FAIL,\r\n    SET_AUTH_LOADING,\r\n    REMOVE_AUTH_LOADING,\r\n    ACTIVATION_SUCCESS,\r\n    ACTIVATION_FAIL,\r\n    USER_LOADED_SUCCESS,\r\n    USER_LOADED_FAIL,\r\n} from './types';\r\n\r\nexport const signup = (first_name, last_name, email, password, re_password) => async dispatch => {\r\n    dispatch({\r\n        type: SET_AUTH_LOADING\r\n    });\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    const body = JSON.stringify({\r\n        first_name,\r\n        last_name,\r\n        email,\r\n        password,\r\n        re_password,\r\n    });\r\n\r\n    try {\r\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/`, body, config);\r\n\r\n        if (res.data.email) {\r\n            dispatch({\r\n                type: SIGNUP_SUCCESS,\r\n                payload: res.data\r\n            });\r\n            dispatch(setAlert('We sent you an email, please activate your account', 'success'));\r\n        } else {\r\n            dispatch({\r\n                type: SIGNUP_FAIL\r\n            });\r\n            dispatch(setAlert('Error creating account', 'danger'));\r\n        }\r\n        dispatch({\r\n            type: REMOVE_AUTH_LOADING\r\n        });\r\n    } catch (err) {\r\n        dispatch({\r\n            type: SIGNUP_FAIL\r\n        });\r\n        dispatch({\r\n            type: REMOVE_AUTH_LOADING\r\n        });\r\n        dispatch(setAlert('Error creating account', 'danger'));\r\n    }\r\n};\r\n\r\nexport const load_user = () => async dispatch => {\r\n    if (localStorage.getItem('access')) {\r\n        const config = {\r\n            headers: {\r\n                'Authorization': `JWT ${localStorage.getItem('access')}`,\r\n                'Accept': 'application/json'\r\n            }\r\n        };\r\n\r\n        try {\r\n            const res = await axios.get(`${process.env.REACT_APP_API_URL}/auth/users/me`, config);\r\n            if (res.data.email) {\r\n                dispatch({\r\n                    type: USER_LOADED_SUCCESS,\r\n                    payload: res.data\r\n                });\r\n            } else {\r\n                dispatch({\r\n                    type: USER_LOADED_FAIL\r\n                });\r\n            }\r\n        } catch (err) {\r\n            dispatch({\r\n                type: USER_LOADED_FAIL\r\n            });\r\n        }\r\n    }\r\n};\r\n\r\n\r\nexport const login = (email, password) => async dispatch => {\r\n    dispatch({\r\n        type: SET_AUTH_LOADING\r\n    });\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    const body = JSON.stringify({\r\n        email,\r\n        password\r\n    });\r\n\r\n    try {\r\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/create/`, body, config);\r\n\r\n        if (res.data.access) {\r\n            dispatch({\r\n                type: LOGIN_SUCCESS,\r\n                payload: res.data\r\n            });\r\n            dispatch(load_user());\r\n            dispatch({\r\n                type: REMOVE_AUTH_LOADING\r\n            });\r\n            dispatch(setAlert('Logged in successfully', 'success'));\r\n        } else {\r\n            dispatch({\r\n                type: LOGIN_FAIL,\r\n            });\r\n            dispatch({\r\n                type: REMOVE_AUTH_LOADING\r\n            });\r\n            dispatch(setAlert('Error authenticating', 'danger'));\r\n        }\r\n    } catch (err) {\r\n        dispatch({\r\n            type: LOGIN_FAIL\r\n        });\r\n        dispatch({\r\n            type: REMOVE_AUTH_LOADING\r\n        });\r\n        dispatch(setAlert('Error authenticating', 'danger'));\r\n\r\n    }\r\n};\r\n\r\nexport const activate = (uid, token) => async dispatch => {\r\n    dispatch ({\r\n        type: SET_AUTH_LOADING\r\n    });\r\n\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    const body = JSON.stringify({\r\n        uid,\r\n        token\r\n    });\r\n\r\n    try {\r\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/activation/`, body, config)\r\n\r\n        if (res.data.uid || res.data.token) {\r\n            dispatch ({\r\n                type: ACTIVATION_FAIL\r\n            });\r\n            dispatch(setAlert('Error activating account', 'danger'));\r\n        } else {\r\n            dispatch({\r\n                type: ACTIVATION_SUCCESS\r\n            });\r\n            dispatch(setAlert('Successfully activated your account', 'success'));\r\n        }\r\n        dispatch({\r\n            type: REMOVE_AUTH_LOADING\r\n        });\r\n    } catch (err) {\r\n        dispatch({\r\n            type: ACTIVATION_FAIL\r\n        });\r\n        dispatch({\r\n            type: REMOVE_AUTH_LOADING\r\n        });\r\n        dispatch(setAlert('Error creating account', 'danger'));\r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}