{"ast":null,"code":"import axios from 'axios';\nimport { combineReducers } from 'redux';\nimport { setAlert } from './alert';\nimport { SIGNUP_SUCCESS, SIGNUP_FAIL, LOGIN_SUCCESS, LOGIN_FAIL, GOOGLE_AUTH_SUCCESS, GOOGLE_AUTH_FAIL, FACEBOOK_AUTH_SUCCESS, FACEBOOK_AUTH_FAIL, AUTHENTICATED_SUCCESS, AUTHENTICATED_FAIL, RESET_PASSWORD_SUCCESS, RESET_PASSWORD_FAIL, RESET_PASSWORD_CONFIRM_SUCCESS, RESET_PASSWORD_CONFIRM_FAIL, REFRESH_SUCCESS, REFRESH_FAIL, SET_AUTH_LOADING, REMOVE_AUTH_LOADING, ACTIVATION_SUCCESS, ACTIVATION_FAIL, USER_LOADED_SUCCESS, USER_LOADED_FAIL, LOGOUT } from './types';\nexport const check_authenticated = () => async dispatch => {\n  if (localStorage.getItem('access')) {\n    const config = {\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify({\n      token: localStorage.getItem('access')\n    });\n\n    try {\n      const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/verify/`, body, config);\n\n      if (res.status === 200) {\n        dispatch({\n          type: AUTHENTICATED_SUCCESS\n        });\n      } else {\n        dispatch({\n          type: AUTHENTICATED_FAIL\n        });\n      }\n    } catch (err) {\n      dispatch({\n        type: AUTHENTICATED_FAIL\n      });\n    }\n  } else {\n    dispatch({\n      type: AUTHENTICATED_FAIL\n    });\n  }\n};\nexport const signup = (first_name, last_name, email, password, re_password) => async dispatch => {\n  dispatch({\n    type: SET_AUTH_LOADING\n  });\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    first_name,\n    last_name,\n    email,\n    password,\n    re_password\n  });\n\n  try {\n    const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/`, body, config);\n\n    if (res.status === 201) {\n      dispatch({\n        type: SIGNUP_SUCCESS,\n        payload: res.data\n      });\n      dispatch(setAlert('We sent you an email, please activate your account', 'success'));\n    } else {\n      dispatch({\n        type: SIGNUP_FAIL\n      });\n      dispatch(setAlert('Error creating account', 'danger'));\n    }\n\n    dispatch({\n      type: REMOVE_AUTH_LOADING\n    });\n  } catch (err) {\n    dispatch({\n      type: SIGNUP_FAIL\n    });\n    dispatch({\n      type: REMOVE_AUTH_LOADING\n    });\n    dispatch(setAlert('Error creating account', 'danger'));\n  }\n};\nexport const load_user = () => async dispatch => {\n  if (localStorage.getItem('access')) {\n    const config = {\n      headers: {\n        'Authorization': `JWT ${localStorage.getItem('access')}`,\n        'Accept': 'application/json'\n      }\n    };\n\n    try {\n      const res = await axios.get(`${process.env.REACT_APP_API_URL}/auth/users/me`, config);\n\n      if (res.data.email) {\n        dispatch({\n          type: USER_LOADED_SUCCESS,\n          payload: res.data\n        });\n      } else {\n        dispatch({\n          type: USER_LOADED_FAIL\n        });\n      }\n    } catch (err) {\n      dispatch({\n        type: USER_LOADED_FAIL\n      });\n    }\n  } else {\n    dispatch({\n      type: USER_LOADED_FAIL\n    });\n  }\n};\nexport const login = (email, password) => async dispatch => {\n  dispatch({\n    type: SET_AUTH_LOADING\n  });\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/create/`, body, config);\n\n    if (res.data.access) {\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data\n      });\n      dispatch(load_user());\n      dispatch({\n        type: REMOVE_AUTH_LOADING\n      });\n      dispatch(setAlert('Logged in successfully', 'success'));\n    } else {\n      dispatch({\n        type: LOGIN_FAIL\n      });\n      dispatch({\n        type: REMOVE_AUTH_LOADING\n      });\n      dispatch(setAlert('Error authenticating', 'danger'));\n    }\n  } catch (err) {\n    dispatch({\n      type: LOGIN_FAIL\n    });\n    dispatch({\n      type: REMOVE_AUTH_LOADING\n    });\n    dispatch(setAlert('Error authenticating', 'danger'));\n  }\n};\nexport const google_authenticate = (state, code) => async dispatch => {\n  if (state && code && !localStorage.getItem('access')) {\n    dispatch({\n      type: SET_AUTH_LOADING\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    };\n    const details = {\n      'state': state,\n      'code': code\n    };\n    const formBody = Object.keys(details).map(key => encodeURIComponent(key) + '=' + encodeURIComponent(details[key])).join('&');\n\n    try {\n      const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/o/google-oauth2/?${formBody}`, config);\n\n      if (res.status === 201) {\n        dispatch({\n          type: GOOGLE_AUTH_SUCCESS,\n          payload: res.data\n        });\n        dispatch(load_user());\n        dispatch({\n          type: REMOVE_AUTH_LOADING\n        });\n        dispatch(setAlert('Logged in successfully', 'success'));\n      } else {\n        dispatch({\n          type: GOOGLE_AUTH_FAIL\n        });\n        dispatch({\n          type: REMOVE_AUTH_LOADING\n        });\n        dispatch(setAlert('Error authenticating', 'danger'));\n      }\n    } catch (err) {\n      dispatch({\n        type: GOOGLE_AUTH_FAIL\n      });\n      dispatch({\n        type: REMOVE_AUTH_LOADING\n      });\n      dispatch(setAlert('Error authenticating', 'danger'));\n    }\n  }\n};\nexport const facebook_authenticate = (state, code) => async dispatch => {\n  if (state && code && !localStorage.getItem('access')) {\n    dispatch({\n      type: SET_AUTH_LOADING\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    };\n    const details = {\n      'state': state,\n      'code': code\n    };\n    const formBody = Object.keys(details).map(key => encodeURIComponent(key) + '=' + encodeURIComponent(details[key])).join('&');\n\n    try {\n      const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/o/facebook/?${formBody}`, config);\n\n      if (res.status === 201) {\n        dispatch({\n          type: FACEBOOK_AUTH_SUCCESS,\n          payload: res.data\n        });\n        dispatch(load_user());\n        dispatch({\n          type: REMOVE_AUTH_LOADING\n        });\n        dispatch(setAlert('Logged in successfully', 'success'));\n      } else {\n        dispatch({\n          type: FACEBOOK_AUTH_FAIL\n        });\n        dispatch({\n          type: REMOVE_AUTH_LOADING\n        });\n        dispatch(setAlert('Error authenticating', 'danger'));\n      }\n    } catch (err) {\n      dispatch({\n        type: FACEBOOK_AUTH_FAIL\n      });\n      dispatch({\n        type: REMOVE_AUTH_LOADING\n      });\n      dispatch(setAlert('Error authenticating', 'danger'));\n    }\n  }\n};\nexport const activate = (uid, token) => async dispatch => {\n  dispatch({\n    type: SET_AUTH_LOADING\n  });\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    uid,\n    token\n  });\n\n  try {\n    const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/activation/`, body, config);\n\n    if (res.data.uid || res.data.token) {\n      dispatch({\n        type: ACTIVATION_FAIL\n      });\n      dispatch(setAlert('Error activating account', 'danger'));\n    } else {\n      dispatch({\n        type: ACTIVATION_SUCCESS\n      });\n      dispatch(setAlert('Successfully activated your account', 'success'));\n    }\n\n    dispatch({\n      type: REMOVE_AUTH_LOADING\n    });\n  } catch (err) {\n    dispatch({\n      type: ACTIVATION_FAIL\n    });\n    dispatch({\n      type: REMOVE_AUTH_LOADING\n    });\n    dispatch(setAlert('Error creating account', 'danger'));\n  }\n};\nexport const refresh = () => async dispatch => {\n  if (localStorage.getItem('refresh')) {\n    const config = {\n      headers: {\n        'Accept': 'application/json',\n        'Content': 'application/json'\n      }\n    };\n    const body = JSON.stringify({\n      refresh: localStorage.getItem('refresh')\n    });\n\n    try {\n      const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/refresh`, body, config);\n\n      if (res.data.access) {\n        dispatch({\n          type: REFRESH_SUCCESS,\n          payload: res.data\n        });\n      } else {\n        dispatch({\n          type: REFRESH_FAIL\n        });\n      }\n    } catch (err) {\n      dispatch({\n        type: REFRESH_FAIL\n      });\n    }\n  } else {\n    dispatch({\n      type: REFRESH_FAIL\n    });\n  }\n};\nexport const reset_password = email => async dispatch => {\n  dispatch({\n    type: SET_AUTH_LOADING\n  });\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email\n  });\n\n  try {\n    await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password/`, body, config);\n    dispatch({\n      type: RESET_PASSWORD_SUCCESS\n    });\n    dispatch({\n      type: REMOVE_AUTH_LOADING\n    });\n    dispatch(setAlert('Password reset email sent', 'success'));\n  } catch (err) {\n    dispatch({\n      type: RESET_PASSWORD_FAIL\n    });\n    dispatch({\n      type: REMOVE_AUTH_LOADING\n    });\n    dispatch(setAlert('Error sending password reset email', 'danger'));\n  }\n};\nexport const reset_password_confirm = (uid, token, new_password, re_new_password) => async dispatch => {\n  dispatch({\n    type: SET_AUTH_LOADING\n  });\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    uid,\n    token,\n    new_password,\n    re_new_password\n  });\n\n  if (new_password !== re_new_password) {\n    dispatch({\n      type: RESET_PASSWORD_CONFIRM_FAIL\n    });\n    dispatch({\n      type: REMOVE_AUTH_LOADING\n    });\n    dispatch(setAlert('Passwords do not match', 'danger'));\n  } else {\n    try {\n      await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password_confirm/`, body, config);\n      dispatch({\n        type: RESET_PASSWORD_CONFIRM_SUCCESS\n      });\n      dispatch({\n        type: REMOVE_AUTH_LOADING\n      });\n      dispatch(setAlert('Password has been reset successfully', 'success'));\n    } catch (err) {\n      dispatch({\n        type: RESET_PASSWORD_CONFIRM_FAIL\n      });\n      dispatch({\n        type: REMOVE_AUTH_LOADING\n      });\n      dispatch(setAlert('Error resetting your password', 'danger'));\n    }\n  }\n};\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n  dispatch(setAlert('Logout Out', 'success'));\n};","map":{"version":3,"sources":["C:/Users/sale1/Desktop/SHOPTIME/frontend/src/actions/auth.js"],"names":["axios","combineReducers","setAlert","SIGNUP_SUCCESS","SIGNUP_FAIL","LOGIN_SUCCESS","LOGIN_FAIL","GOOGLE_AUTH_SUCCESS","GOOGLE_AUTH_FAIL","FACEBOOK_AUTH_SUCCESS","FACEBOOK_AUTH_FAIL","AUTHENTICATED_SUCCESS","AUTHENTICATED_FAIL","RESET_PASSWORD_SUCCESS","RESET_PASSWORD_FAIL","RESET_PASSWORD_CONFIRM_SUCCESS","RESET_PASSWORD_CONFIRM_FAIL","REFRESH_SUCCESS","REFRESH_FAIL","SET_AUTH_LOADING","REMOVE_AUTH_LOADING","ACTIVATION_SUCCESS","ACTIVATION_FAIL","USER_LOADED_SUCCESS","USER_LOADED_FAIL","LOGOUT","check_authenticated","dispatch","localStorage","getItem","config","headers","body","JSON","stringify","token","res","post","process","env","REACT_APP_API_URL","status","type","err","signup","first_name","last_name","email","password","re_password","payload","data","load_user","get","login","access","google_authenticate","state","code","details","formBody","Object","keys","map","key","encodeURIComponent","join","facebook_authenticate","activate","uid","refresh","reset_password","reset_password_confirm","new_password","re_new_password","logout"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { combineReducers } from 'redux';\r\nimport { setAlert } from './alert';\r\nimport {\r\n    SIGNUP_SUCCESS,\r\n    SIGNUP_FAIL,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    GOOGLE_AUTH_SUCCESS,\r\n    GOOGLE_AUTH_FAIL,\r\n    FACEBOOK_AUTH_SUCCESS,\r\n    FACEBOOK_AUTH_FAIL,\r\n    AUTHENTICATED_SUCCESS,\r\n    AUTHENTICATED_FAIL,\r\n    RESET_PASSWORD_SUCCESS,\r\n    RESET_PASSWORD_FAIL,\r\n    RESET_PASSWORD_CONFIRM_SUCCESS,\r\n    RESET_PASSWORD_CONFIRM_FAIL,\r\n    REFRESH_SUCCESS,\r\n    REFRESH_FAIL,\r\n    SET_AUTH_LOADING,\r\n    REMOVE_AUTH_LOADING,\r\n    ACTIVATION_SUCCESS,\r\n    ACTIVATION_FAIL,\r\n    USER_LOADED_SUCCESS,\r\n    USER_LOADED_FAIL,\r\n    LOGOUT,\r\n} from './types';\r\n\r\nexport const check_authenticated = () => async dispatch => {\r\n    if (localStorage.getItem('access')) {\r\n        const config = {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            }\r\n        };\r\n\r\n        const body = JSON.stringify({\r\n            token: localStorage.getItem('access')\r\n        });\r\n\r\n        try {\r\n            const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/verify/`, body, config);\r\n\r\n            if (res.status === 200) {\r\n                dispatch({\r\n                    type: AUTHENTICATED_SUCCESS\r\n                });\r\n            } else {\r\n                dispatch({\r\n                    type: AUTHENTICATED_FAIL\r\n                });\r\n            }\r\n        } catch (err) {\r\n            dispatch({\r\n                type: AUTHENTICATED_FAIL\r\n            });\r\n        }\r\n    } else {\r\n        dispatch({\r\n            type: AUTHENTICATED_FAIL\r\n        });\r\n    }\r\n};\r\n\r\nexport const signup = (first_name, last_name, email, password, re_password) => async dispatch => {\r\n    dispatch({\r\n        type: SET_AUTH_LOADING\r\n    });\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    const body = JSON.stringify({\r\n        first_name,\r\n        last_name,\r\n        email,\r\n        password,\r\n        re_password,\r\n    });\r\n\r\n    try {\r\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/`, body, config);\r\n\r\n        if (res.status === 201) {\r\n            dispatch({\r\n                type: SIGNUP_SUCCESS,\r\n                payload: res.data\r\n            });\r\n            dispatch(setAlert('We sent you an email, please activate your account', 'success'));\r\n        } else {\r\n            dispatch({\r\n                type: SIGNUP_FAIL\r\n            });\r\n            dispatch(setAlert('Error creating account', 'danger'));\r\n        }\r\n        dispatch({\r\n            type: REMOVE_AUTH_LOADING\r\n        });\r\n    } catch (err) {\r\n        dispatch({\r\n            type: SIGNUP_FAIL\r\n        });\r\n        dispatch({\r\n            type: REMOVE_AUTH_LOADING\r\n        });\r\n        dispatch(setAlert('Error creating account', 'danger'));\r\n    }\r\n};\r\n\r\nexport const load_user = () => async dispatch => {\r\n    if (localStorage.getItem('access')) {\r\n        const config = {\r\n            headers: {\r\n                'Authorization': `JWT ${localStorage.getItem('access')}`,\r\n                'Accept': 'application/json'\r\n            }\r\n        };\r\n\r\n        try {\r\n            const res = await axios.get(`${process.env.REACT_APP_API_URL}/auth/users/me`, config);\r\n            if (res.data.email) {\r\n                dispatch({\r\n                    type: USER_LOADED_SUCCESS,\r\n                    payload: res.data\r\n                });\r\n            } else {\r\n                dispatch({\r\n                    type: USER_LOADED_FAIL\r\n                });\r\n            }\r\n        } catch (err) {\r\n            dispatch({\r\n                type: USER_LOADED_FAIL\r\n            });\r\n        }\r\n    } else {\r\n        dispatch({\r\n            type: USER_LOADED_FAIL\r\n        });\r\n    }\r\n};\r\n\r\n\r\nexport const login = (email, password) => async dispatch => {\r\n    dispatch({\r\n        type: SET_AUTH_LOADING\r\n    });\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    const body = JSON.stringify({\r\n        email,\r\n        password\r\n    });\r\n\r\n    try {\r\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/create/`, body, config);\r\n\r\n        if (res.data.access) {\r\n            dispatch({\r\n                type: LOGIN_SUCCESS,\r\n                payload: res.data\r\n            });\r\n            dispatch(load_user());\r\n            dispatch({\r\n                type: REMOVE_AUTH_LOADING\r\n            });\r\n            dispatch(setAlert('Logged in successfully', 'success'));\r\n        } else {\r\n            dispatch({\r\n                type: LOGIN_FAIL,\r\n            });\r\n            dispatch({\r\n                type: REMOVE_AUTH_LOADING\r\n            });\r\n            dispatch(setAlert('Error authenticating', 'danger'));\r\n        }\r\n    } catch (err) {\r\n        dispatch({\r\n            type: LOGIN_FAIL\r\n        });\r\n        dispatch({\r\n            type: REMOVE_AUTH_LOADING\r\n        });\r\n        dispatch(setAlert('Error authenticating', 'danger'));\r\n\r\n    }\r\n};\r\n\r\n\r\nexport const google_authenticate = (state, code) => async dispatch => {\r\n    if (state && code && !localStorage.getItem('access')) {\r\n        dispatch({\r\n            type: SET_AUTH_LOADING\r\n        });\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/x-www-form-urlencoded'\r\n            }\r\n        };\r\n\r\n        const details = {\r\n            'state': state,\r\n            'code': code\r\n        };\r\n\r\n        const formBody = Object.keys(details).map(key => encodeURIComponent(key) + '=' + encodeURIComponent(details[key])).join('&');\r\n\r\n        try {\r\n            const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/o/google-oauth2/?${formBody}`, config);\r\n\r\n            if (res.status === 201) {\r\n                dispatch({\r\n                    type: GOOGLE_AUTH_SUCCESS,\r\n                    payload: res.data\r\n                });\r\n                dispatch(load_user());\r\n                dispatch({\r\n                    type: REMOVE_AUTH_LOADING\r\n                });\r\n                dispatch(setAlert('Logged in successfully', 'success'));\r\n            } else {\r\n                dispatch({\r\n                    type: GOOGLE_AUTH_FAIL\r\n                });\r\n                dispatch({\r\n                    type: REMOVE_AUTH_LOADING\r\n                });\r\n                dispatch(setAlert('Error authenticating', 'danger'));\r\n            }\r\n        } catch (err) {\r\n            dispatch({\r\n                type: GOOGLE_AUTH_FAIL\r\n            });\r\n            dispatch({\r\n                type: REMOVE_AUTH_LOADING\r\n            });\r\n            dispatch(setAlert('Error authenticating', 'danger'));\r\n        }\r\n    }\r\n};\r\n\r\n\r\nexport const facebook_authenticate = (state, code) => async dispatch => {\r\n    if (state && code && !localStorage.getItem('access')) {\r\n        dispatch({\r\n            type: SET_AUTH_LOADING\r\n        });\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/x-www-form-urlencoded'\r\n            }\r\n        };\r\n\r\n        const details = {\r\n            'state': state,\r\n            'code': code\r\n        };\r\n\r\n        const formBody = Object.keys(details).map(key => encodeURIComponent(key) + '=' + encodeURIComponent(details[key])).join('&');\r\n\r\n        try {\r\n            const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/o/facebook/?${formBody}`, config);\r\n\r\n            if (res.status === 201) {\r\n                dispatch({\r\n                    type: FACEBOOK_AUTH_SUCCESS,\r\n                    payload: res.data\r\n                });\r\n                dispatch(load_user());\r\n                dispatch({\r\n                    type: REMOVE_AUTH_LOADING\r\n                });\r\n                dispatch(setAlert('Logged in successfully', 'success'));\r\n            } else {\r\n                dispatch({\r\n                    type: FACEBOOK_AUTH_FAIL\r\n                });\r\n                dispatch({\r\n                    type: REMOVE_AUTH_LOADING\r\n                });\r\n                dispatch(setAlert('Error authenticating', 'danger'));\r\n            }\r\n        } catch (err) {\r\n            dispatch({\r\n                type: FACEBOOK_AUTH_FAIL\r\n            });\r\n            dispatch({\r\n                type: REMOVE_AUTH_LOADING\r\n            });\r\n            dispatch(setAlert('Error authenticating', 'danger'));\r\n        }\r\n    }\r\n};\r\n\r\n\r\nexport const activate = (uid, token) => async dispatch => {\r\n    dispatch ({\r\n        type: SET_AUTH_LOADING\r\n    });\r\n\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    const body = JSON.stringify({\r\n        uid,\r\n        token\r\n    });\r\n\r\n    try {\r\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/activation/`, body, config)\r\n\r\n        if (res.data.uid || res.data.token) {\r\n            dispatch ({\r\n                type: ACTIVATION_FAIL\r\n            });\r\n            dispatch(setAlert('Error activating account', 'danger'));\r\n        } else {\r\n            dispatch({\r\n                type: ACTIVATION_SUCCESS\r\n            });\r\n            dispatch(setAlert('Successfully activated your account', 'success'));\r\n        }\r\n        dispatch({\r\n            type: REMOVE_AUTH_LOADING\r\n        });\r\n    } catch (err) {\r\n        dispatch({\r\n            type: ACTIVATION_FAIL\r\n        });\r\n        dispatch({\r\n            type: REMOVE_AUTH_LOADING\r\n        });\r\n        dispatch(setAlert('Error creating account', 'danger'));\r\n    }\r\n};\r\n\r\nexport const refresh = () => async dispatch => {\r\n    if (localStorage.getItem('refresh')) {\r\n        const config = {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content': 'application/json'\r\n            }\r\n        };\r\n\r\n        const body = JSON.stringify({\r\n            refresh: localStorage.getItem('refresh')\r\n        });\r\n\r\n        try {\r\n            const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/refresh`, body, config);\r\n\r\n            if (res.data.access) {\r\n                dispatch({\r\n                    type: REFRESH_SUCCESS,\r\n                    payload: res.data\r\n                });\r\n            } else {\r\n                dispatch({\r\n                    type: REFRESH_FAIL\r\n                });\r\n            }\r\n        } catch (err) {\r\n            dispatch({\r\n                type: REFRESH_FAIL\r\n            });\r\n        }\r\n    } else {\r\n        dispatch({\r\n            type: REFRESH_FAIL\r\n        });\r\n    }\r\n};\r\n\r\nexport const reset_password = (email) => async dispatch => {\r\n    dispatch({\r\n        type: SET_AUTH_LOADING\r\n    });\r\n\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    const body = JSON.stringify({ email });\r\n\r\n    try {\r\n        await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password/`, body, config);\r\n\r\n        dispatch({\r\n            type: RESET_PASSWORD_SUCCESS\r\n        });\r\n        dispatch({\r\n            type: REMOVE_AUTH_LOADING\r\n        });\r\n        dispatch(setAlert('Password reset email sent', 'success'));\r\n    } catch (err) {\r\n        dispatch({\r\n            type: RESET_PASSWORD_FAIL\r\n        });\r\n        dispatch({\r\n            type: REMOVE_AUTH_LOADING\r\n        });\r\n        dispatch(setAlert('Error sending password reset email', 'danger'));\r\n    }\r\n};\r\n\r\nexport const reset_password_confirm = (uid, token, new_password, re_new_password) => async dispatch => {\r\n    dispatch({\r\n        type: SET_AUTH_LOADING\r\n    });\r\n\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    const body = JSON.stringify({\r\n        uid,\r\n        token,\r\n        new_password,\r\n        re_new_password\r\n    });\r\n\r\n    if (new_password !== re_new_password) {\r\n        dispatch({\r\n            type: RESET_PASSWORD_CONFIRM_FAIL\r\n        });\r\n        dispatch({\r\n            type: REMOVE_AUTH_LOADING\r\n        });\r\n        dispatch(setAlert('Passwords do not match', 'danger'));\r\n    } else {\r\n        try {\r\n            await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password_confirm/`, body, config);\r\n\r\n            dispatch({\r\n                type: RESET_PASSWORD_CONFIRM_SUCCESS\r\n            });\r\n            dispatch({\r\n                type: REMOVE_AUTH_LOADING\r\n            });\r\n            dispatch(setAlert('Password has been reset successfully', 'success'));\r\n        } catch (err) {\r\n            dispatch({\r\n                type: RESET_PASSWORD_CONFIRM_FAIL\r\n            });\r\n            dispatch({\r\n                type: REMOVE_AUTH_LOADING\r\n            });\r\n            dispatch(setAlert('Error resetting your password', 'danger'));\r\n        }\r\n    }\r\n};\r\n\r\nexport const logout = () => dispatch => {\r\n    dispatch({\r\n        type: LOGOUT\r\n    });\r\n    dispatch(setAlert('Logout Out', 'success'));\r\n};"]},"metadata":{},"sourceType":"module"}